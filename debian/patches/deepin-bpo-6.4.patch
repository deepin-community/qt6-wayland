--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -16,7 +16,6 @@
 find_package(Qt6 ${PROJECT_VERSION} CONFIG REQUIRED COMPONENTS
     BuildInternals
 )
-qt_internal_project_setup()
 
 if(NOT MACOS AND NOT QNX AND (ANDROID OR NOT LINUX))
     message(NOTICE "Skipping the build as the condition \"LINUX OR MACOS OR QNX\" is not met.")
--- a/src/imports/compositor-extensions/iviapplication/CMakeLists.txt
+++ b/src/imports/compositor-extensions/iviapplication/CMakeLists.txt
@@ -24,8 +24,6 @@
         Qt::WaylandCompositor
 )
 
-qt_internal_add_autogen_sync_header_dependencies(WaylandCompositorIviapplication WaylandCompositor)
-
 #### Keys ignored in scope 1:.:.:iviapplication.pro:<TRUE>:
 # CXX_MODULE = "qml"
 # QML_IMPORT_VERSION = "$$QT_VERSION"
--- a/src/imports/compositor-extensions/presentationtime/CMakeLists.txt
+++ b/src/imports/compositor-extensions/presentationtime/CMakeLists.txt
@@ -20,6 +20,3 @@
         Qt::Gui
         Qt::WaylandCompositorPrivate
 )
-
-qt_internal_add_autogen_sync_header_dependencies(WaylandCompositorPresentationTime
-    WaylandCompositor)
--- a/src/imports/compositor-extensions/qtshell/CMakeLists.txt
+++ b/src/imports/compositor-extensions/qtshell/CMakeLists.txt
@@ -33,5 +33,3 @@
     FILES
         ${CMAKE_CURRENT_SOURCE_DIR}/../../../extensions/qt-shell-unstable-v1.xml
 )
-
-qt_internal_add_autogen_sync_header_dependencies(WaylandCompositorQtShell WaylandCompositor)
--- a/src/imports/compositor-extensions/wlshell/CMakeLists.txt
+++ b/src/imports/compositor-extensions/wlshell/CMakeLists.txt
@@ -24,8 +24,6 @@
         Qt::WaylandCompositor
 )
 
-qt_internal_add_autogen_sync_header_dependencies(WaylandCompositorWLShell WaylandCompositor)
-
 #### Keys ignored in scope 1:.:.:wlshell.pro:<TRUE>:
 # CXX_MODULE = "qml"
 # QML_IMPORT_VERSION = "$$QT_VERSION"
--- a/src/imports/compositor-extensions/xdgshell/CMakeLists.txt
+++ b/src/imports/compositor-extensions/xdgshell/CMakeLists.txt
@@ -24,8 +24,6 @@
         Qt::WaylandCompositor
 )
 
-qt_internal_add_autogen_sync_header_dependencies(WaylandCompositorXdgShell WaylandCompositor)
-
 #### Keys ignored in scope 1:.:.:xdgshell.pro:<TRUE>:
 # CXX_MODULE = "qml"
 # QML_IMPORT_VERSION = "$$QT_VERSION"
--- a/src/imports/texture-sharing-extension/CMakeLists.txt
+++ b/src/imports/texture-sharing-extension/CMakeLists.txt
@@ -29,7 +29,6 @@
         Qt::WaylandCompositorPrivate
 )
 
-qt_internal_add_autogen_sync_header_dependencies(WaylandTextureSharingExtension WaylandCompositor)
 #### Keys ignored in scope 1:.:.:texture-sharing-extension.pro:<TRUE>:
 # CXX_MODULE = "qml"
 # IMPORT_VERSION = "1.$$QT_MINOR_VERSION"
--- a/src/imports/texture-sharing/CMakeLists.txt
+++ b/src/imports/texture-sharing/CMakeLists.txt
@@ -30,8 +30,6 @@
         Qt::QuickPrivate
         Qt::WaylandClient
         Qt::WaylandClientPrivate
-    PRIVATE_HEADER_FILTERS
-        "^qwayland-.*\.h|^wayland-.*-protocol\.h"
 )
 
 qt6_generate_wayland_protocol_client_sources(WaylandTextureSharing
@@ -39,8 +37,6 @@
         ${CMAKE_CURRENT_SOURCE_DIR}/../../extensions/qt-texture-sharing-unstable-v1.xml
 )
 
-qt_internal_add_autogen_sync_header_dependencies(WaylandTextureSharing WaylandCompositor)
-
 #### Keys ignored in scope 1:.:.:texture-sharing.pro:<TRUE>:
 # CXX_MODULE = "qml"
 # IMPORT_VERSION = "1.$$QT_MINOR_VERSION"
--- a/src/client/qwaylandinputcontext.cpp
+++ b/src/client/qwaylandinputcontext.cpp
@@ -286,7 +286,8 @@
     case XKB_COMPOSE_NOTHING:
         return false;
     default:
-        Q_UNREACHABLE_RETURN(false);
+	Q_UNREACHABLE();
+	return false;
     }
 }
 
--- a/src/client/qwaylandwindowmanagerintegration_p.h
+++ b/src/client/qwaylandwindowmanagerintegration_p.h
@@ -18,6 +18,7 @@
 #include <QtCore/QObject>
 #include <QtCore/QScopedPointer>
 
+#include <QWindow>
 #include <QtGui/private/qgenericunixservices_p.h>
 
 #include <QtWaylandClient/private/qwayland-qt-windowmanager.h>
@@ -42,7 +43,7 @@
 
     bool openUrl(const QUrl &url) override;
     bool openDocument(const QUrl &url) override;
-    QString portalWindowIdentifier(QWindow *window) override;
+    QString portalWindowIdentifier(QWindow *window);
 
     bool showIsFullScreen() const;
 
--- a/src/client/qwaylandinputdevice.cpp
+++ b/src/client/qwaylandinputdevice.cpp
@@ -249,10 +249,10 @@
     QString cursorThemeName;
     QSize cursorSize;
 
-    if (const QPlatformTheme *platformTheme = QGuiApplicationPrivate::platformTheme()) {
-        cursorThemeName = platformTheme->themeHint(QPlatformTheme::MouseCursorTheme).toString();
-        cursorSize = platformTheme->themeHint(QPlatformTheme::MouseCursorSize).toSize();
-    }
+    // if (const QPlatformTheme *platformTheme = QGuiApplicationPrivate::platformTheme()) {
+    //     cursorThemeName = platformTheme->themeHint(QPlatformTheme::MouseCursorTheme).toString();
+    //     cursorSize = platformTheme->themeHint(QPlatformTheme::MouseCursorSize).toSize();
+    // }
 
     if (cursorThemeName.isEmpty())
         cursorThemeName = QStringLiteral("default");
--- a/src/compositor/compositor_api/qwaylandcompositor.cpp
+++ b/src/compositor/compositor_api/qwaylandcompositor.cpp
@@ -109,7 +109,7 @@
         xkb_state *xkbState = keyb->xkbState();
 
         const xkb_keysym_t sym = xkb_state_key_get_one_sym(xkbState, code);
-        Qt::KeyboardModifiers modifiers = QXkbCommon::modifiers(xkbState, sym);
+        Qt::KeyboardModifiers modifiers = QXkbCommon::modifiers(xkbState);
         int qtkey = QXkbCommon::keysymToQtKey(sym, modifiers, xkbState, code);
         QString text = QXkbCommon::lookupString(xkbState, code);
 
--- a/src/compositor/CMakeLists.txt
+++ b/src/compositor/CMakeLists.txt
@@ -73,8 +73,6 @@
         Qt::CorePrivate
         Qt::GuiPrivate
         Qt::WaylandGlobalPrivate
-    PRIVATE_HEADER_FILTERS
-        "^qwayland-.*\.h|^wayland-.*-protocol\.h"
 )
 
 set(compositor_no_pch_sources
--- a/src/client/CMakeLists.txt
+++ b/src/client/CMakeLists.txt
@@ -76,8 +76,6 @@
         Qt::CorePrivate
         Qt::GuiPrivate
         Qt::WaylandGlobalPrivate
-    PRIVATE_HEADER_FILTERS
-        "^qwayland-.*\.h|^wayland-.*-protocol\.h"
 )
 
 qt6_generate_wayland_protocol_client_sources(WaylandClient
--- a/src/plugins/shellintegration/wl-shell/CMakeLists.txt
+++ b/src/plugins/shellintegration/wl-shell/CMakeLists.txt
@@ -17,8 +17,6 @@
         Qt::GuiPrivate
         Qt::WaylandClientPrivate
         Wayland::Client
-    PRIVATE_HEADER_FILTERS
-        "^qwayland-.*\.h|^wayland-.*-protocol\.h"
 )
 
 qt6_generate_wayland_protocol_client_sources(WlShellIntegrationPrivate
