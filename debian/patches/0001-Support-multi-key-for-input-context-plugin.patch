From c9ffeadc998f6dc84d4391ccba89f2ce990179fe Mon Sep 17 00:00:00 2001
From: JiDe Zhang <zhangjide@uniontech.com>
Date: Tue, 5 Mar 2024 16:08:00 +0000
Subject: [PATCH] Support multi-key for input context plugin
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Sync from QPlatformInputContextFactory::requested in
8596998cb025a8338c9403f5ef9db5a23f5cc682 of qtbase to
QPlatformInputContextFactory.

Fixes: QTBUG-120202
Change-Id: Ib15d8a59c4cb3baaa19355ed5d7c30c87a7a1c16
Reviewed-by: Tor Arne Vestb√∏ <tor.arne.vestbo@qt.io>
---
 src/client/qwaylanddisplay.cpp     |  8 +++---
 src/client/qwaylanddisplay_p.h     | 10 ++++---
 src/client/qwaylandintegration.cpp | 43 +++++++++++++++++-------------
 3 files changed, 35 insertions(+), 26 deletions(-)

diff --git a/src/client/qwaylanddisplay.cpp b/src/client/qwaylanddisplay.cpp
index eb43313f..e6731a78 100644
--- a/src/client/qwaylanddisplay.cpp
+++ b/src/client/qwaylanddisplay.cpp
@@ -344,7 +344,7 @@ void QWaylandDisplay::setupConnection()
     if (!mXkbContext)
         qCWarning(lcQpaWayland, "failed to create xkb context");
 #endif
-    if (!mClientSideInputContextRequested)
+    if (mWaylandInputContextRequested)
         checkTextInputProtocol();
 }
 
@@ -393,7 +393,7 @@ bool QWaylandDisplay::initialize()
         // Give wl_output.done and zxdg_output_v1.done events a chance to arrive
         forceRoundTrip();
     }
-    if (!mClientSideInputContextRequested)
+    if (mWaylandInputContextRequested)
         mTextInputManagerIndex = INT_MAX;
 
     return qEnvironmentVariableIntValue("QT_WAYLAND_DONT_CHECK_SHELL_INTEGRATION") || shellIntegration();
@@ -1009,8 +1009,8 @@ bool QWaylandDisplay::isKeyboardAvailable() const
             [](const QWaylandInputDevice *device) { return device->keyboard() != nullptr; });
 }
 
-bool QWaylandDisplay::isClientSideInputContextRequested() const {
-    return mClientSideInputContextRequested;
+bool QWaylandDisplay::isWaylandInputContextRequested() const {
+    return mWaylandInputContextRequested;
 }
 
 #if QT_CONFIG(cursor)
diff --git a/src/client/qwaylanddisplay_p.h b/src/client/qwaylanddisplay_p.h
index 7a64749e..e1685227 100644
--- a/src/client/qwaylanddisplay_p.h
+++ b/src/client/qwaylanddisplay_p.h
@@ -40,6 +40,8 @@ struct wp_viewport;
 
 QT_BEGIN_NAMESPACE
 
+#define WAYLAND_IM_KEY "wayland"
+
 class QAbstractEventDispatcher;
 class QSocketNotifier;
 class QPlatformScreen;
@@ -195,7 +197,7 @@ public:
     wl_event_queue *frameEventQueue() { return m_frameEventQueue; };
 
     bool isKeyboardAvailable() const;
-    bool isClientSideInputContextRequested() const;
+    bool isWaylandInputContextRequested() const;
 
     void initEventThread();
 
@@ -295,9 +297,9 @@ private:
     static const wl_callback_listener syncCallbackListener;
     bool mWaylandTryReconnect = false;
 
-    bool mClientSideInputContextRequested = [] () {
-        const QString& requested = QPlatformInputContextFactory::requested();
-        return !requested.isEmpty() && requested != QLatin1String("wayland");
+    bool mWaylandInputContextRequested = [] () {
+        const auto requested = QPlatformInputContextFactory::requested();
+        return requested.isEmpty() || requested.contains(QLatin1String(WAYLAND_IM_KEY));
     }();
     QStringList mTextInputManagerList;
     int mTextInputManagerIndex = INT_MAX;
diff --git a/src/client/qwaylandintegration.cpp b/src/client/qwaylandintegration.cpp
index 88a2fa7e..1fa8f040 100644
--- a/src/client/qwaylandintegration.cpp
+++ b/src/client/qwaylandintegration.cpp
@@ -462,27 +462,34 @@ void QWaylandIntegration::reconfigureInputContext()
         return;
     }
 
-    const QString &requested = QPlatformInputContextFactory::requested();
-    if (requested == QLatin1String("qtvirtualkeyboard"))
+    auto requested = QPlatformInputContextFactory::requested();
+    if (requested.contains(QLatin1String("qtvirtualkeyboard")))
         qCWarning(lcQpaWayland) << "qtvirtualkeyboard currently is not supported at client-side,"
-                                   " use QT_IM_MODULE=qtvirtualkeyboard at compositor-side.";
-
-    if (!mDisplay->isClientSideInputContextRequested()) {
-        if (mDisplay->textInputMethodManager() != nullptr)
-            mInputContext.reset(new QWaylandInputMethodContext(mDisplay.data()));
-#if QT_WAYLAND_TEXT_INPUT_V4_WIP
-        else if (mDisplay->textInputManagerv1() != nullptr || mDisplay->textInputManagerv2() != nullptr || mDisplay->textInputManagerv4() != nullptr)
-#else //  QT_WAYLAND_TEXT_INPUT_V4_WIP
-        else if (mDisplay->textInputManagerv1() != nullptr || mDisplay->textInputManagerv2() != nullptr)
-#endif // QT_WAYLAND_TEXT_INPUT_V4_WIP
-            mInputContext.reset(new QWaylandInputContext(mDisplay.data()));
-    } else {
-        mInputContext.reset(QPlatformInputContextFactory::create(requested));
-    }
+                                   " use QT_IM_MODULES=qtvirtualkeyboard at compositor-side.";
+
+    if (mDisplay->isWaylandInputContextRequested()
+        && !requested.contains(QLatin1String(WAYLAND_IM_KEY)))
+        requested.append(QLatin1String(WAYLAND_IM_KEY));
 
     const QString defaultInputContext(QStringLiteral("compose"));
-    if ((!mInputContext || !mInputContext->isValid()) && requested != defaultInputContext)
-        mInputContext.reset(QPlatformInputContextFactory::create(defaultInputContext));
+    if (!requested.contains(defaultInputContext))
+        requested.append(defaultInputContext);
+
+    for (const QString &imKey : requested) {
+        if (imKey == QLatin1String(WAYLAND_IM_KEY)) {
+            Q_ASSERT(mDisplay->isWaylandInputContextRequested());
+            if (mDisplay->textInputMethodManager() != nullptr)
+                mInputContext.reset(new QWaylandInputMethodContext(mDisplay.data()));
+            else if (mDisplay->textInputManagerv1() != nullptr
+                     || mDisplay->textInputManagerv2() != nullptr)
+                mInputContext.reset(new QWaylandInputContext(mDisplay.data()));
+        } else {
+            mInputContext.reset(QPlatformInputContextFactory::create(imKey));
+        }
+
+        if (mInputContext && mInputContext->isValid())
+            break;
+    }
 
 #if QT_CONFIG(xkbcommon)
     QXkbCommon::setXkbContext(mInputContext.data(), mDisplay->xkbContext());
-- 
2.43.0

